BST Remove algorithm:

BSTRemove(tree, key) {
   parent = null
   currentNode = tree⇢root
   while (currentNode != null) {
      // Check if currentNode has an equal key
      if (currentNode⇢key == key) {
         if (currentNode⇢left is null && currentNode⇢right is null) {
            // Remove leaf

            if (parent is null) { // Node is root
               tree⇢root = null
            }
            else if (parent⇢left == currentNode) {
               parent⇢left = null
            }
            else {
               parent⇢right = null
            }
            return true // Node found and removed
         }
         else if (currentNode⇢right is null) {
            // Remove node with only left child
            
            if (parent is null) { // Node is root
               tree⇢root = currentNode⇢left
            }
            else if (parent⇢left == currentNode) {
               parent⇢left = currentNode⇢left
            }
            else {
               parent⇢right = currentNode⇢left
            }
            return true // Node found and removed
         }
         else if (currentNode⇢left is null) {
            // Remove node with only right child
            
            if (parent is null) { // Node is root
               tree⇢root = currentNode⇢right
            }
            else if (parent⇢left == currentNode) {
               parent⇢left = currentNode⇢right
            }
            else {
               parent⇢right = currentNode⇢right
            }
            return true // Node found and removed
         }
         else {
            // Remove node with two children
            
            // Find successor (leftmost child of right subtree)
            successor = currentNode⇢right
            while (successor⇢left is not null) {
               successor = successor⇢left
            }

            // Copy successor's key to current node
            currentNode⇢key = successor⇢key
            Parent = currentNode

            // Reassign currentNode and key so that loop continues with new key
            currentNode = currentNode⇢right
            key = successor⇢key
         }
      }
      else if (currentNode⇢key < key) {
         // Search right
         parent = currentNode
         currentNode = currentNode⇢right
      }
      else {
         // Search left
         parent = currentNode
         currentNode = currentNode⇢left
      }
   }
   return false // Node not found
}
